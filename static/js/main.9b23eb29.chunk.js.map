{"version":3,"sources":["logo.svg","Introduction.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Introduction","Component","react_default","a","createElement","className","Typist_default","avgTypingDelay","stdTypingDelay","cursor","show","Delay","ms","href","Boolean","window","location","hostname","match","ReactDOM","render","src_Introduction_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6LC6EzBC,eAxEeC,6LAoC1B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,eAAgB,GAAIC,eAAgB,GAAIC,OAAQ,CAACC,MAAM,IAC/DR,EAAAC,EAAAC,cAACE,EAAAH,EAAOQ,MAAR,CAAcC,GAAI,MAChBV,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SAAjB,qBAGAH,EAAAC,EAAAC,cAACE,EAAAH,EAAOQ,MAAR,CAAcC,GAAI,MAClBV,EAAAC,EAAAC,cAAA,OAAKC,UAAY,QAAjB,eAGAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,YAEFF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,eAAgB,GAAIC,eAAgB,GAAIC,OAAQ,CAACC,MAAM,IAC7DR,EAAAC,EAAAC,cAACE,EAAAH,EAAOQ,MAAR,CAAcC,GAAI,MAClBV,EAAAC,EAAAC,cAAA,OAAKC,UAAY,oBAAjB,qHAGEH,EAAAC,EAAAC,cAAA,KAAGS,KAAK,kDAAR,sBAHF,cAMEX,EAAAC,EAAAC,cAAA,KAAGS,KAAK,yCAAR,oBANF,cArBiBZ,cC7BPa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAAkBC,SAASC,eAAe,SDmHpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9b23eb29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport Typist from 'react-typist';\nimport logo from './logo.svg';\nimport './Introduction.css';\n\nclass TypingAnimation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {index: 0, string: \"\"}\n    console.log(this.message);\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      this.props.delay\n    );\n    console.log(this.props.message.split(''));\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState((state, props) =>({\n      index: state.index + 1\n    }));\n  }\n  render() {\n    (this.state.index < this.props.message.length) && (this.state.string += this.props.message.split('')[this.state.index]);\n    (this.state.index >= this.props.message.length) && (clearInterval(this.timerID));\n    return (\n      this.state.string\n    );\n\n  }\n}\n\nclass Introduction extends Component {\n  render() {\n    return (\n      <div className=\"Introduction\">\n        <br/>\n        <br/>\n        <Typist avgTypingDelay={90} stdTypingDelay={35} cursor={{show: false}}>\n        <Typist.Delay ms={800} />\n          <div className = \"intro\">\n            Hello, my name is\n          </div>\n          <Typist.Delay ms={500} />\n          <div className = \"name\">\n            Rohil Tuli.\n          </div>\n          <br/>\n          <br/>\n        </Typist>\n        <br/>\n        <Typist avgTypingDelay={35} stdTypingDelay={30} cursor={{show: false}}>\n          <Typist.Delay ms={5000} />\n          <div className = \"temporaryMessage\">\n            I'm currently working on designing my personal website, while learning to use React.\n            Feel free to check out my&nbsp;\n            <a href=\"https://www.github.com/rohilt/rohilt.github.io\">\n            progress on GitHub\n            </a>, or my&nbsp;\n            <a href=\"https://www.linkedin.com/in/rohiltuli\">\n            LinkedIn profile\n            </a>\n            .\n          </div>\n        </Typist>\n      </div>\n    );\n  }\n}\n\nexport default Introduction;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Introduction from './Introduction';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Introduction />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}